import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { CategoryService } from '../../../services/category.service';
import { Category } from '../../../models/category.model';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';
import { faTags, faPlus, faTrashAlt, faExclamationCircle, faCheckCircle, faBoxOpen } from '@fortawesome/free-solid-svg-icons';

@Component({
  selector: 'app-manage-categories',
  standalone: true,
  imports: [CommonModule, FormsModule, FontAwesomeModule],
  templateUrl: './manage-categories.component.html',
  styleUrls: ['./manage-categories.component.scss']
})
export class ManageCategoriesComponent implements OnInit {
  // Component properties
  categories: Category[] = [];
  newCategoryName: string = '';
  isLoading: boolean = false;
  errorMessage: string | null = null;
  successMessage: string | null = null;

  // Font Awesome icons
  faTags = faTags;
  faPlus = faPlus;
  faTrashAlt = faTrashAlt;
  faExclamationCircle = faExclamationCircle;
  faCheckCircle = faCheckCircle;
  faBoxOpen = faBoxOpen;

  constructor(private categoryService: CategoryService) {}

  ngOnInit(): void {
    this.fetchCategories();
  }

  fetchCategories(): void {
    this.isLoading = true;
    this.errorMessage = null;
    this.categoryService.getCategories().subscribe({
      next: (categories) => {
        this.categories = categories;
        this.isLoading = false;
      },
      error: (error) => {
        console.error('Error fetching categories:', error);
        this.errorMessage = 'Failed to load categories. Please try again.';
        this.isLoading = false;
      }
    });
  }

  addCategory(): void {
    if (!this.newCategoryName.trim()) return;

    this.errorMessage = null;
    this.successMessage = null;

    const newCategory: Category = {
      categoryName: this.newCategoryName.trim(),
      categoryId: '' // Will be generated by backend
    };

    this.categoryService.addCategory(newCategory).subscribe({
      next: () => {
        this.successMessage = 'Category added successfully!';
        this.newCategoryName = '';
        this.fetchCategories();
        setTimeout(() => this.successMessage = null, 3000);
      },
      error: (error) => {
        console.error('Error adding category:', error);
        this.errorMessage = error.error?.message || 'Failed to add category. Please try again.';
      }
    });
  }

  deleteCategory(categoryId: string): void {
    if (!confirm('Are you sure you want to delete this category?')) return;

    this.errorMessage = null;
    this.categoryService.deleteCategory(categoryId).subscribe({
      next: () => {
        this.successMessage = 'Category deleted successfully!';
        this.fetchCategories();
        setTimeout(() => this.successMessage = null, 3000);
      },
      error: (error) => {
        console.error('Error deleting category:', error);
        this.errorMessage = error.error?.message || 'Failed to delete category. Please try again.';
      }
    });
  }
}